import type { AppConfig } from '@nuxt/schema';
import theme from '#build/ui/textarea';
import type { UseComponentIconsProps } from '../composables/useComponentIcons';
import type { ComponentConfig } from '../types/utils';
type Textarea = ComponentConfig<typeof theme, AppConfig, 'textarea'>;
export interface TextareaProps extends UseComponentIconsProps {
    /**
     * The element or component this component should render as.
     * @defaultValue 'div'
     */
    as?: any;
    id?: string;
    name?: string;
    /** The placeholder text when the textarea is empty. */
    placeholder?: string;
    /**
     * @defaultValue 'primary'
     */
    color?: Textarea['variants']['color'];
    /**
     * @defaultValue 'outline'
     */
    variant?: Textarea['variants']['variant'];
    /**
     * @defaultValue 'md'
     */
    size?: Textarea['variants']['size'];
    required?: boolean;
    autofocus?: boolean;
    autofocusDelay?: number;
    autoresize?: boolean;
    autoresizeDelay?: number;
    disabled?: boolean;
    class?: any;
    rows?: number;
    maxrows?: number;
    /** Highlight the ring color like a focus state. */
    highlight?: boolean;
    ui?: Textarea['slots'];
}
export interface TextareaEmits {
    (e: 'update:modelValue', payload: string | number): void;
    (e: 'blur', event: FocusEvent): void;
    (e: 'change', event: Event): void;
}
export interface TextareaSlots {
    leading(props?: {}): any;
    default(props?: {}): any;
    trailing(props?: {}): any;
}
declare const _default: __VLS_WithSlots<import("vue").DefineComponent<TextareaProps & {
    modelValue?: string | number | null;
}, {
    textareaRef: import("vue").Ref<HTMLTextAreaElement | null, HTMLTextAreaElement | null>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string | number | null | undefined) => any;
} & {
    blur: (event: FocusEvent) => any;
    change: (event: Event) => any;
    "update:modelValue": (payload: string | number) => any;
}, string, import("vue").PublicProps, Readonly<TextareaProps & {
    modelValue?: string | number | null;
}> & Readonly<{
    onBlur?: ((event: FocusEvent) => any) | undefined;
    onChange?: ((event: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((payload: string | number) => any) | undefined;
}>, {
    autofocusDelay: number;
    autoresizeDelay: number;
    rows: number;
    maxrows: number;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>, TextareaSlots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
