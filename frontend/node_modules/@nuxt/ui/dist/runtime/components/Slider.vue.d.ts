import type { SliderRootProps } from 'reka-ui';
import type { AppConfig } from '@nuxt/schema';
import theme from '#build/ui/slider';
import type { ComponentConfig } from '../types/utils';
type Slider = ComponentConfig<typeof theme, AppConfig, 'slider'>;
export interface SliderProps extends Pick<SliderRootProps, 'name' | 'disabled' | 'inverted' | 'min' | 'max' | 'step' | 'minStepsBetweenThumbs'> {
    /**
     * The element or component this component should render as.
     * @defaultValue 'div'
     */
    as?: any;
    /**
     * @defaultValue 'md'
     */
    size?: Slider['variants']['size'];
    /**
     * @defaultValue 'primary'
     */
    color?: Slider['variants']['color'];
    /**
     * The orientation of the slider.
     * @defaultValue 'horizontal'
     */
    orientation?: SliderRootProps['orientation'];
    /** The value of the slider when initially rendered. Use when you do not need to control the state of the slider. */
    defaultValue?: number | number[];
    class?: any;
    ui?: Slider['slots'];
}
export interface SliderEmits {
    (e: 'update:modelValue', payload: number | number[]): void;
    (e: 'change', payload: Event): void;
}
declare const _default: import("vue").DefineComponent<SliderProps & {
    modelValue?: number | number[];
}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: number | number[] | undefined) => any;
} & {
    change: (payload: Event) => any;
    "update:modelValue": (payload: number | number[]) => any;
}, string, import("vue").PublicProps, Readonly<SliderProps & {
    modelValue?: number | number[];
}> & Readonly<{
    onChange?: ((payload: Event) => any) | undefined;
    "onUpdate:modelValue"?: ((payload: number | number[]) => any) | undefined;
}>, {
    orientation: "horizontal" | "vertical";
    step: number;
    max: number;
    min: number;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export default _default;
